// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:firstflutterapp/entity/user_info_entity.dart';
import 'package:firstflutterapp/generated/json/user_info_entity_helper.dart';
import 'package:firstflutterapp/entity/banner_test_entity.dart';
import 'package:firstflutterapp/generated/json/banner_test_entity_helper.dart';
import 'package:firstflutterapp/entity/tree_type_entity.dart';
import 'package:firstflutterapp/generated/json/tree_type_entity_helper.dart';
import 'package:firstflutterapp/entity/chapters_entity.dart';
import 'package:firstflutterapp/generated/json/chapters_entity_helper.dart';
import 'package:firstflutterapp/entity/hot_key_entity.dart';
import 'package:firstflutterapp/generated/json/hot_key_entity_helper.dart';
import 'package:firstflutterapp/entity/friend_link_entity.dart';
import 'package:firstflutterapp/generated/json/friend_link_entity_helper.dart';
import 'package:firstflutterapp/entity/article_list_entity.dart';
import 'package:firstflutterapp/generated/json/article_list_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case UserInfoEntity:
			return userInfoEntityFromJson(data as UserInfoEntity, json) as T;			case BannerTestEntity:
			return bannerTestEntityFromJson(data as BannerTestEntity, json) as T;			case TreeTypeEntity:
			return treeTypeEntityFromJson(data as TreeTypeEntity, json) as T;			case TreeTypechild:
			return treeTypechildFromJson(data as TreeTypechild, json) as T;			case ChaptersEntity:
			return chaptersEntityFromJson(data as ChaptersEntity, json) as T;			case HotKeyEntity:
			return hotKeyEntityFromJson(data as HotKeyEntity, json) as T;			case FriendLinkEntity:
			return friendLinkEntityFromJson(data as FriendLinkEntity, json) as T;			case ArticleListEntity:
			return articleListEntityFromJson(data as ArticleListEntity, json) as T;			case ArticleListData:
			return articleListDataFromJson(data as ArticleListData, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case UserInfoEntity:
			return userInfoEntityToJson(data as UserInfoEntity);			case BannerTestEntity:
			return bannerTestEntityToJson(data as BannerTestEntity);			case TreeTypeEntity:
			return treeTypeEntityToJson(data as TreeTypeEntity);			case TreeTypechild:
			return treeTypechildToJson(data as TreeTypechild);			case ChaptersEntity:
			return chaptersEntityToJson(data as ChaptersEntity);			case HotKeyEntity:
			return hotKeyEntityToJson(data as HotKeyEntity);			case FriendLinkEntity:
			return friendLinkEntityToJson(data as FriendLinkEntity);			case ArticleListEntity:
			return articleListEntityToJson(data as ArticleListEntity);			case ArticleListData:
			return articleListDataToJson(data as ArticleListData);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'UserInfoEntity':
			return UserInfoEntity().fromJson(json);			case 'BannerTestEntity':
			return BannerTestEntity().fromJson(json);			case 'TreeTypeEntity':
			return TreeTypeEntity().fromJson(json);			case 'TreeTypechild':
			return TreeTypechild().fromJson(json);			case 'ChaptersEntity':
			return ChaptersEntity().fromJson(json);			case 'HotKeyEntity':
			return HotKeyEntity().fromJson(json);			case 'FriendLinkEntity':
			return FriendLinkEntity().fromJson(json);			case 'ArticleListEntity':
			return ArticleListEntity().fromJson(json);			case 'ArticleListData':
			return ArticleListData().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'UserInfoEntity':
			return List<UserInfoEntity>();			case 'BannerTestEntity':
			return List<BannerTestEntity>();			case 'TreeTypeEntity':
			return List<TreeTypeEntity>();			case 'TreeTypechild':
			return List<TreeTypechild>();			case 'ChaptersEntity':
			return List<ChaptersEntity>();			case 'HotKeyEntity':
			return List<HotKeyEntity>();			case 'FriendLinkEntity':
			return List<FriendLinkEntity>();			case 'ArticleListEntity':
			return List<ArticleListEntity>();			case 'ArticleListData':
			return List<ArticleListData>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}